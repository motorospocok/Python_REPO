#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 17, 2021 08:39:08 PM CET  platform: Windows NT

import sys
import socket
import struct
import time
import binascii
import ipaddress

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def Check_Conn_Click(p1):
    print('MTS_Matrix_support.Check_Conn_Click')
    TCP_IP1 = w.Entry13.get()    
    TCP_IP2 = ipaddress.IPv4Address(TCP_IP1)
    TCP_IP = str(TCP_IP2)
    TCP_PORT = eval(w.Entry14.get())    
    print(TCP_IP)
    location = (TCP_IP,TCP_PORT)
    BUFFER_SIZE = 1024
    print(TCP_IP)
    print(TCP_PORT)
    sys.stdout.flush()
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result_of_check = s.connect_ex(location)
    if result_of_check == 0:
       w.Entry15.delete(0,11)
       w.Entry15.insert(0,"CONNECT OK")
    else:
       w.Entry15.delete(0,11)
       w.Entry15.insert(0,"ERROR")

def Dw10_Click(p1):
    current_att = eval(w.Entry10.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw10_Click')
        sys.stdout.flush()
        w.Entry10.delete(0,2)
        w.Entry10.insert(0,str(current_att))
    val = 'A10P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)


def Dw11_Click(p1):
    current_att = eval(w.Entry11.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw11_Click')
        sys.stdout.flush()
        w.Entry11.delete(0,2)
        w.Entry11.insert(0,str(current_att))
    val = 'A11P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw12_Click(p1):
    current_att = eval(w.Entry12.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw12_Click')
        sys.stdout.flush()
        w.Entry12.delete(0,2)
        w.Entry12.insert(0,str(current_att))
    val = 'A12P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw1_Click(p1):
    current_att = eval(w.Entry1.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw1_Click')
        sys.stdout.flush()
        w.Entry1.delete(0,2)
        w.Entry1.insert(0,str(current_att))
    val = 'A1P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)


def Dw2_Click(p1):
    current_att = eval(w.Entry2.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw2_Click')
        sys.stdout.flush()
        w.Entry2.delete(0,2)
        w.Entry2.insert(0,str(current_att))
    val = 'A2P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw3_Click(p1):
    current_att = eval(w.Entry3.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw3_Click')
        sys.stdout.flush()
        w.Entry3.delete(0,2)
        w.Entry3.insert(0,str(current_att))
    val = 'A3P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw4_Click(p1):
    current_att = eval(w.Entry4.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw4_Click')
        sys.stdout.flush()
        w.Entry4.delete(0,2)
        w.Entry4.insert(0,str(current_att))
    val = 'A4P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw5_Click(p1):
    current_att = eval(w.Entry5.get())
    if current_att > 0:
        current_att = current_att - 1    
        print('MTS_Matrix_support.Dw5_Click')
        sys.stdout.flush()
        w.Entry5.delete(0,2)
        w.Entry5.insert(0,str(current_att))
    val = 'A5P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw6_Click(p1):
    current_att = eval(w.Entry6.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw6_Click')
        sys.stdout.flush()
        w.Entry6.delete(0,2)
        w.Entry6.insert(0,str(current_att))
    val = 'A6P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw7_Click(p1):
    current_att = eval(w.Entry7.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw7_Click')
        sys.stdout.flush()
        w.Entry7.delete(0,2)
        w.Entry7.insert(0,str(current_att))
    val = 'A7P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw8_Click(p1):
    current_att = eval(w.Entry8.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw8_Click')
        sys.stdout.flush()
        w.Entry8.delete(0,2)
        w.Entry8.insert(0,str(current_att))
    val = 'A8P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Dw9_Click(p1):
    current_att = eval(w.Entry9.get())
    if current_att > 0:
        current_att = current_att - 1
        print('MTS_Matrix_support.Dw9_Click')
        sys.stdout.flush()
        w.Entry9.delete(0,2)
        w.Entry9.insert(0,str(current_att))
    val = 'A9P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up10_Click(p1):
    current_att = eval(w.Entry10.get())
    if current_att < 99:
        current_att = current_att + 1
        print('MTS_Matrix_support.Up10_Click')
        sys.stdout.flush()
        w.Entry10.delete(0,2)
        w.Entry10.insert(0,str(current_att))
    val = 'A10P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up11_Click(p1):
    current_att = eval(w.Entry11.get())
    if current_att < 99:
        current_att = current_att + 1    
        print('MTS_Matrix_support.Up11_Click')
        sys.stdout.flush()
        w.Entry11.delete(0,2)
        w.Entry11.insert(0,str(current_att))
    val = 'A11P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up12_Click(p1):
    current_att = eval(w.Entry12.get())
    if current_att < 99:
        current_att = current_att + 1    
        print('MTS_Matrix_support.Up12_Click')
        sys.stdout.flush()
        w.Entry12.delete(0,2)
        w.Entry12.insert(0,str(current_att))
    val = 'A12P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)


def Up1_Click(p1):
    current_att = eval(w.Entry1.get())
    if current_att < 99:
        current_att = current_att + 1    
        print('MTS_Matrix_support.Up1_Click')
        sys.stdout.flush()
        w.Entry1.delete(0,2)
        w.Entry1.insert(0,str(current_att))
    val = 'A1P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)


def Up2_click(p1):
    current_att = eval(w.Entry2.get())
    if current_att < 99:
        current_att = current_att + 1        
        print('MTS_Matrix_support.Up2_click')
        sys.stdout.flush()
        w.Entry2.delete(0,2)
        w.Entry2.insert(0,str(current_att))
    val = 'A2P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)


def Up3_Click(p1):
    current_att = eval(w.Entry3.get())
    if current_att < 99:
        current_att = current_att + 1        
        print('MTS_Matrix_support.Up3_Click')
        sys.stdout.flush()
        w.Entry3.delete(0,2)
        w.Entry3.insert(0,str(current_att))
    val = 'A3P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up4_Click(p1):
    current_att = eval(w.Entry4.get())
    if current_att < 99:
        current_att = current_att + 1    
        print('MTS_Matrix_support.Up4_Click')
        sys.stdout.flush()
        w.Entry4.delete(0,2)
        w.Entry4.insert(0,str(current_att))
    val = 'A4P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up5_Click(p1):
    current_att = eval(w.Entry5.get())
    if current_att < 99:
        current_att = current_att + 1        
        print('MTS_Matrix_support.Up5_Click')
        sys.stdout.flush()
        w.Entry5.delete(0,2)
        w.Entry5.insert(0,str(current_att))
    val = 'A5P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up6_Click(p1):
    current_att = eval(w.Entry6.get())
    if current_att < 99:
        current_att = current_att + 1        
        print('MTS_Matrix_support.Up6_Click')
        sys.stdout.flush()
        w.Entry6.delete(0,2)
        w.Entry6.insert(0,str(current_att))
    val = 'A6P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up7_Click(p1):
    current_att = eval(w.Entry7.get())
    if current_att < 99:
        current_att = current_att + 1        
        print('MTS_Matrix_support.Up7_Click')
        sys.stdout.flush()
        w.Entry7.delete(0,2)
        w.Entry7.insert(0,str(current_att))
    val = 'A7P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up8_Click(p1):
    current_att = eval(w.Entry8.get())
    if current_att < 99:
        current_att = current_att + 1        
        print('MTS_Matrix_support.Up8_Click')
        sys.stdout.flush()
        w.Entry8.delete(0,2)
        w.Entry8.insert(0,str(current_att))
    val = 'A8P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def Up9_Click(p1):
    current_att = eval(w.Entry9.get())
    if current_att < 99:
        current_att = current_att + 1        
        print('MTS_Matrix_support.Up9_Click')
        sys.stdout.flush()
        w.Entry9.delete(0,2)
        w.Entry9.insert(0,str(current_att))
    val = 'A9P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    print(m1)
    print(m2)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import MTS_Matrix
    MTS_Matrix.vp_start_gui()




