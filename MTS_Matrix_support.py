#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 17, 2021 08:39:08 PM CET  platform: Windows NT

import sys
import socket
import struct
import time
import binascii
import ipaddress

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

#Disbled NW comm if remark insterted!
    
def send_tcp_packet(packet_to_be_send):
    #Converting TCP IP data from GUI to valid IP address
    #For socket operations and data sending TCP
    TCP_IP1 = w.Entry13.get()    
    TCP_IP2 = ipaddress.IPv4Address(TCP_IP1)
    TCP_IP = str(TCP_IP2)
    TCP_PORT = eval(w.Entry14.get()) 

    MESSAGE = binascii.unhexlify(packet_to_be_send)    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((TCP_IP, TCP_PORT))
    s.send(MESSAGE)
    s.close()
    
def Step_Matrix_Down(matrix_NUM):

    #Converting string name to Class object
    obj_convert = str("w.Entry") + str(matrix_NUM)
    object1 = eval(obj_convert)
    
    current_att = eval(object1.get())
        
    if current_att > 95:
        object1.delete(0,2)
        object1.insert(0,str("95"))
        current_att = 95

    if current_att < 0:
        object1.delete(0,2)
        object1.insert(0,str("0"))
        current_att = 0
       
    if current_att > 0:
        current_att = current_att - 1
        object1.delete(0,2)
        object1.insert(0,str(current_att))

    val = 'A' + str(matrix_NUM) + 'P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'    
    send_tcp_packet(m2)

def Step_Matrix_UP(matrix_NUM):

    #Converting string name to Class object
    obj_convert = str("w.Entry") + str(matrix_NUM)
    object1 = eval(obj_convert)
    
    current_att = eval(object1.get())
        
    if current_att > 95:
        object1.delete(0,2)
        object1.insert(0,str("95"))
        current_att = 95

    if current_att < 0:
        object1.delete(0,2)
        object1.insert(0,str("0"))
        current_att = 0
       
    if current_att < 95:
        current_att = current_att + 1
        object1.delete(0,2)
        object1.insert(0,str(current_att))
        
    val = 'A' + str(matrix_NUM) + 'P' + str(current_att)
    message1 = val.encode('utf-8')
    m1 = message1.hex()
    m2 = '02' + m1 + '03'
    send_tcp_packet(m2)


def Check_Conn_Click(p1):
    
    TCP_IP1 = w.Entry13.get()    
    TCP_IP2 = ipaddress.IPv4Address(TCP_IP1)
    TCP_IP = str(TCP_IP2)
    TCP_PORT = eval(w.Entry14.get())    
    location = (TCP_IP,TCP_PORT)
    BUFFER_SIZE = 1024
    sys.stdout.flush()
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result_of_check = s.connect_ex(location)
    if result_of_check == 0:
       w.Entry15.delete(0,11)
       w.Entry15.insert(0,"CONNECT OK")
    else:
       w.Entry15.delete(0,11)
       w.Entry15.insert(0,"ERROR")

def Dw10_Click(p1):
    Step_Matrix_Down(10)

def Dw10_hold(p1):
    Step_Matrix_Down(10)

def Dw11_Click(p1):
    Step_Matrix_Down(11)

def Dw11_hold(p1):
    Step_Matrix_Down(11)

def Dw12_Click(p1):
    Step_Matrix_Down(12)

def Dw12_hold(p1):
    Step_Matrix_Down(12)

def Dw1_Click(p1):
    Step_Matrix_Down(1)

def Dw1_hold(p1):
    Step_Matrix_Down(1)

def Dw2_Click(p1):
    Step_Matrix_Down(2)

def Dw2_hold(p1):
    Step_Matrix_Down(2)

def Dw3_Click(p1):
    Step_Matrix_Down(3)

def Dw3_hold(p1):
    Step_Matrix_Down(3)

def Dw4_Click(p1):
    Step_Matrix_Down(4)

def Dw4_hold(p1):
    Step_Matrix_Down(4)

def Dw5_Click(p1):
    Step_Matrix_Down(5)

def Dw5_hold(p1):
    Step_Matrix_Down(5)

def Dw6_Click(p1):
    Step_Matrix_Down(6)

def Dw6_hold(p1):
    Step_Matrix_Down(6)

def Dw7_Click(p1):
    Step_Matrix_Down(7)

def Dw7_hold(p1):
    Step_Matrix_Down(7)

def Dw8_Click(p1):
    Step_Matrix_Down(8)

def Dw8_hold(p1):
    Step_Matrix_Down(8)
    
def Dw9_Click(p1):
    Step_Matrix_Down(9)

def Dw9_hold(p1):
    Step_Matrix_Down(9)

def Up10_Click(p1):
    Step_Matrix_UP(10)

def Up10_hold(p1):
    Step_Matrix_UP(10)

def Up11_Click(p1):
    Step_Matrix_UP(11)

def Up11_hold(p1):
    Step_Matrix_UP(11)

def Up12_Click(p1):
    Step_Matrix_UP(12)

def Up12_hold(p1):
    Step_Matrix_UP(12)
    
def Up1_Click(p1):
    Step_Matrix_UP(1)
    
def Up1_hold(p1):
    Step_Matrix_UP(1)
    
def Up2_click(p1):
    Step_Matrix_UP(2)

def Up2_hold(p1):
    Step_Matrix_UP(2)

def Up3_Click(p1):
    Step_Matrix_UP(3)

def Up3_hold(p1):
    Step_Matrix_UP(3)

def Up4_Click(p1):
    Step_Matrix_UP(4)

def Up4_hold(p1):
    Step_Matrix_UP(4)

def Up5_Click(p1):
    Step_Matrix_UP(5)

def Up5_hold(p1):
    Step_Matrix_UP(5)

def Up6_Click(p1):
    Step_Matrix_UP(6)

def Up6_hold(p1):
    Step_Matrix_UP(6)

def Up7_Click(p1):
    Step_Matrix_UP(7)

def Up7_hold(p1):
    Step_Matrix_UP(7)

def Up8_Click(p1):
    Step_Matrix_UP(8)

def Up8_hold(p1):
    Step_Matrix_UP(8)

def Up9_Click(p1):
    Step_Matrix_UP(9)

def Up9_hold(p1):
    Step_Matrix_UP(9)

    
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import MTS_Matrix
    MTS_Matrix.vp_start_gui()




